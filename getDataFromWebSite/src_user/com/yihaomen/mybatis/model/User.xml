<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.yihaomen.mybatis.inter.IUserOperation">

	<select id="selectUserByID" parameterType="int" resultType="User">
	    select * from `user` where id = #{id}
	</select>
	
	<!-- 为了返回list 类型而定义的returnMap -->
	<resultMap type="User" id="resultListUser">
        <id column="id" property="id" />
        <result column="userName" property="userName" />
        <result column="userAge" property="userAge" />
        <result column="userAddress" property="userAddress" />
        <collection property="articles" ofType="Article" resultMap="resultUserArticleList">
        
        </collection>
    </resultMap>
    
    <resultMap id="aaa" type="region" >
	    <id column="id" property="id" />
	    <result column="parent_id" property="parentId" />
	    <result column="grade" property="grade" />
	    <result column="code" property="code"  />
	    <result column="name" property="name"  />
	    <result column="alias" property="alias" />
   </resultMap>
  
  <select id="selectForKey" parameterType="string" resultMap="aaa">
	    select * from region where id = #{string}
  </select>
    
	<!-- 返回list 的select 语句，注意 resultMap 的值是指向前面定义好的 -->
	<select id="selectUsers" parameterType="string" resultMap="resultListUser">
	    select * from user where userName like #{userName}
	</select>
	
	
	
	<!-- User 联合文章进行查询 方法之一的配置 (多对一的方式)  -->	
	<resultMap id="resultUserArticleList" type="Article">
	    <id property="id" column="aid" />
	    <result property="title" column="title" />
	    <result property="content" column="content" />
	    
	    <association property="user" javaType="User">
	        <id property="id" column="id" />
	        <result property="userName" column="userName" />
	        <result property="userAddress" column="userAddress" />	        
	    </association>	    
	</resultMap>
	
	<!-- User 联合文章进行查询 方法之二的配置 (多对一的方式) -->	
	<resultMap id="resultUserArticleList-2" type="Article">
	    <id property="id" column="aid" />
	    <result property="title" column="title" />
	    <result property="content" column="content" />	    
	    <association property="user" javaType="User" resultMap="resultListUser" />
	</resultMap>
	
	<!-- 一对多  一个作者的所有书籍 -->
	<select id="getArticlesByUser" parameterType="int" resultMap="resultListUser">
	   select user.id,user.userName,user.userAddress,article.id aid,article.title,article.content from user,article 
	          where user.id = article.userid and user.id=#{id}
	</select>
	<select id="getUserArticles" parameterType="int" resultMap="resultUserArticleList">
	   select user.id,user.userName,user.userAddress,article.id aid,article.title,article.content from user,article 
	          where user.id=article.userid and user.id=#{id}
	</select>
	<!-- 查询多个用户 -->
	<select id="getUsersByIds" resultMap="resultListUser">
	   select user.id,user.userName,user.userAddress,article.id aid,article.title,article.content from user,article 
	   <if test="ids != null and  ids !=''">
    		where user.id in
		    <foreach item="item" index="index" collection="ids" open="("
		        separator="," close=")">
		        #{item}
		    </foreach>
	   </if>
	</select>
	
	
	<!--执行增加操作的SQL语句。id和parameterType  
       分别与IUserOperation接口中的addUser方法的名字和  
       参数类型一致。以#{name}的形式引用Student参数  
       的name属性，MyBatis将使用反射读取Student参数  
       的此属性。#{name}中name大小写敏感。引用其他  
       的gender等属性与此一致。seGeneratedKeys设置  
       为"true"表明要MyBatis获取由数据库自动生成的主  
       键；keyProperty="id"指定把获取到的主键值注入   到User的id属性--> 
    <insert id="addUser" parameterType="User" 
        useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        insert into user(userName,userAge,userAddress)  
             values(#{userName},#{userAge},#{userAddress})
    </insert>
    
    <update id="updateUser" parameterType="User" >
        update user set userName=#{userName},userAge=#{userAge},userAddress=#{userAddress} where id=#{id}
    </update>
    
    <delete id="deleteUser" parameterType="int">
        delete from user where id=#{id}
    </delete>
    
    <!-- 批量插入数据 -->
    <insert id="insertUserDish" parameterType="java.util.List">
	  	insert into
	  	user(userName,userAge,userAddress)
	  	values
		  <foreach collection="list" item="item" index="index"
		   separator=",">
		   (#{item.userName,jdbcType=VARCHAR},#{item.userAge,jdbcType=INTEGER},#{item.userAddress,jdbcType=VARCHAR})
		  </foreach>
	 </insert>
	 <!-- 批量插入数据 -->
    <select id="insertUserDish1" parameterType="java.util.List">
	  	insert into
	  	user(userName,userAge,userAddress)
	  	values
		  <foreach collection="list" item="item" index="index"
		   separator=",">
		   (#{item.userName,jdbcType=VARCHAR},#{item.userAge,jdbcType=INTEGER},#{item.userAddress,jdbcType=VARCHAR})
		  </foreach>
	 </select>
</mapper>